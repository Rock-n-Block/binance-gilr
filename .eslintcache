[{"/Users/gleb/projects/dds-frontend/src/index.js":"1","/Users/gleb/projects/dds-frontend/src/App.js":"2","/Users/gleb/projects/dds-frontend/src/reportWebVitals.js":"3","/Users/gleb/projects/dds-frontend/src/redux/store.js":"4","/Users/gleb/projects/dds-frontend/src/contexts/index.js":"5","/Users/gleb/projects/dds-frontend/src/redux/reducers/index.js":"6","/Users/gleb/projects/dds-frontend/src/config/index.js":"7","/Users/gleb/projects/dds-frontend/src/redux/reducers/user.js":"8","/Users/gleb/projects/dds-frontend/src/redux/reducers/form.js":"9","/Users/gleb/projects/dds-frontend/src/redux/reducers/modal.js":"10","/Users/gleb/projects/dds-frontend/src/redux/reducers/wallet.js":"11","/Users/gleb/projects/dds-frontend/src/components/Modal/index.js":"12","/Users/gleb/projects/dds-frontend/src/components/Form/index.js":"13","/Users/gleb/projects/dds-frontend/src/components/Header/index.js":"14","/Users/gleb/projects/dds-frontend/src/components/Footer/index.js":"15","/Users/gleb/projects/dds-frontend/src/contexts/contractContext/index.js":"16","/Users/gleb/projects/dds-frontend/src/utils/index.js":"17","/Users/gleb/projects/dds-frontend/src/redux/actions/index.js":"18","/Users/gleb/projects/dds-frontend/src/components/Input/index.js":"19","/Users/gleb/projects/dds-frontend/src/components/HeaderDropdown/index.js":"20","/Users/gleb/projects/dds-frontend/src/components/Dropdown/index.js":"21","/Users/gleb/projects/dds-frontend/src/utils/prettifiers.js":"22","/Users/gleb/projects/dds-frontend/src/utils/localStorage.js":"23","/Users/gleb/projects/dds-frontend/src/redux/actions/user.js":"24","/Users/gleb/projects/dds-frontend/src/redux/actions/wallet.js":"25","/Users/gleb/projects/dds-frontend/src/redux/actions/modal.js":"26","/Users/gleb/projects/dds-frontend/src/redux/actions/form.js":"27","/Users/gleb/projects/dds-frontend/src/utils/binance/index.js":"28","/Users/gleb/projects/dds-frontend/src/utils/metamask/index.js":"29","/Users/gleb/projects/dds-frontend/src/utils/backend/index.js":"30","/Users/gleb/projects/dds-frontend/src/utils/contractService/index.js":"31"},{"size":725,"mtime":1623404051750,"results":"32","hashOfConfig":"33"},{"size":1126,"mtime":1623408854483,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1623404051752,"results":"35","hashOfConfig":"33"},{"size":224,"mtime":1623404051752,"results":"36","hashOfConfig":"33"},{"size":63,"mtime":1623404051750,"results":"37","hashOfConfig":"33"},{"size":245,"mtime":1623404051751,"results":"38","hashOfConfig":"33"},{"size":1180,"mtime":1623767189666,"results":"39","hashOfConfig":"33"},{"size":353,"mtime":1623404051751,"results":"40","hashOfConfig":"33"},{"size":336,"mtime":1623404051751,"results":"41","hashOfConfig":"33"},{"size":323,"mtime":1623404051751,"results":"42","hashOfConfig":"33"},{"size":764,"mtime":1623404051752,"results":"43","hashOfConfig":"33"},{"size":1173,"mtime":1623404051749,"results":"44","hashOfConfig":"33"},{"size":17610,"mtime":1623410140361,"results":"45","hashOfConfig":"33"},{"size":595,"mtime":1623408689894,"results":"46","hashOfConfig":"33"},{"size":800,"mtime":1623408720683,"results":"47","hashOfConfig":"33"},{"size":6260,"mtime":1623759195302,"results":"48","hashOfConfig":"33"},{"size":428,"mtime":1623404051753,"results":"49","hashOfConfig":"33"},{"size":198,"mtime":1623404051750,"results":"50","hashOfConfig":"33"},{"size":2191,"mtime":1623408770742,"results":"51","hashOfConfig":"33"},{"size":2123,"mtime":1623404051748,"results":"52","hashOfConfig":"53"},{"size":3314,"mtime":1623408809032,"results":"54","hashOfConfig":"33"},{"size":1640,"mtime":1623408540336,"results":"55","hashOfConfig":"33"},{"size":217,"mtime":1623404051753,"results":"56","hashOfConfig":"33"},{"size":106,"mtime":1623404051751,"results":"57","hashOfConfig":"33"},{"size":397,"mtime":1623404051751,"results":"58","hashOfConfig":"33"},{"size":105,"mtime":1623404051750,"results":"59","hashOfConfig":"33"},{"size":106,"mtime":1623404051750,"results":"60","hashOfConfig":"33"},{"size":8831,"mtime":1623404051752,"results":"61","hashOfConfig":"33"},{"size":8227,"mtime":1623404051753,"results":"62","hashOfConfig":"33"},{"size":647,"mtime":1623404051752,"results":"63","hashOfConfig":"33"},{"size":2447,"mtime":1623404051753,"results":"64","hashOfConfig":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9fdwez",{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":2,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1h7i02t",{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},"/Users/gleb/projects/dds-frontend/src/index.js",[],"/Users/gleb/projects/dds-frontend/src/App.js",["144","145"],"import React from 'react';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Form from './components/Form';\nimport Modal from './components/Modal';\nimport bg from './assets/images/bg.svg';\nimport config from './config';\nimport { useSelector } from 'react-redux';\n\nconst App = React.memo(() => {\n  const { dex } = useSelector(({ wallet }) => wallet);\n\n  const formatTokenLink = (network) => {\n    if (!dex) return '';\n    const token = dex.tokens.filter((item) => item.network === network)[0];\n    return network === 'Binance-Chain'\n      ? 'https://explorer.binance.org/asset/WISH-2D5'\n      : config.tokenLinks()[\n          network === 'Ethereum'\n            ? 'ethereum'\n            : network === 'Binance-Smart-Chain'\n            ? 'binanceSmartChain'\n            : 'binanceChain'\n        ] + `/token/${token.token_address}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-container\">\n        <div className=\"body\">\n          <Form />\n        </div>\n\n        <Footer />\n        <Modal />\n      </div>\n    </div>\n  );\n});\n\nexport default App;\n","/Users/gleb/projects/dds-frontend/src/reportWebVitals.js",[],"/Users/gleb/projects/dds-frontend/src/redux/store.js",[],"/Users/gleb/projects/dds-frontend/src/contexts/index.js",[],"/Users/gleb/projects/dds-frontend/src/redux/reducers/index.js",[],"/Users/gleb/projects/dds-frontend/src/config/index.js",["146"],"export default {\n  IS_PRODUCTION: true,\n  serverDomain() {\n    return this.IS_PRODUCTION\n      ? `https://bridge.bscgirl.com/api/v1`\n      : `https://devswaps.rubic.exchange/api/v1`;\n  },\n  links: {\n    twitter: '',\n    telegram: '',\n    medium: '',\n    github: '',\n    reddit: '',\n    discord: '',\n    email: '',\n    policy: '',\n  },\n  tokenLinks() {\n    return {\n      ethereum: this.IS_PRODUCTION\n        ? 'https://etherscan.io'\n        : 'https://kovan.etherscan.io',\n      binanceSmartChain: this.IS_PRODUCTION\n        ? 'https://bscscan.com'\n        : 'https://testnet.bscscan.com',\n      binanceChain: this.IS_PRODUCTION\n        ? 'https://explorer.binance.org'\n        : 'https://testnet-explorer.binance.org',\n    };\n  },\n  chainIds: {\n    mainnet: {\n      Ethereum: {\n        name: 'Mainnet',\n        id: [1, '0x1', '0x01'],\n      },\n      'Binance-Smart-Chain': {\n        name: 'Binance smart chain',\n        id: [56, '0x38'],\n      },\n    },\n    testnet: {\n      Ethereum: {\n        name: 'Kovan testnet',\n        id: [42, '0x2a'],\n      },\n      'Binance-Smart-Chain': {\n        name: 'Binance smart chain testnet',\n        id: [97, '0x61'],\n      },\n    },\n  },\n};\n","/Users/gleb/projects/dds-frontend/src/redux/reducers/user.js",["147"],"const initialState = {\n  address: '',\n  errorMsg: '',\n  errorCode: 0,\n  network: '',\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case 'USER:SET_DATA':\n      const newState = JSON.parse(JSON.stringify({\n        ...state,\n        ...payload\n      }))\n      return newState;\n    default:\n      return state\n  }\n}\n","/Users/gleb/projects/dds-frontend/src/redux/reducers/form.js",["148"],"const initialState = {\n  fieldName: {\n    text: '',\n    image: '',\n  }\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case 'FORM:ERROR':\n      const newState = JSON.parse(JSON.stringify({\n        ...state,\n        ...payload\n      }))\n      return newState;\n    default:\n      return state\n  }\n}\n","/Users/gleb/projects/dds-frontend/src/redux/reducers/modal.js",["149"],"const initialState = {\n    isOpen: false,\n    text: '',\n    image: '',\n}\n\nexport default (state = initialState, { type, payload }) => {\n    switch (type) {\n        case 'MODAL:TOGGLE':\n            return {\n                ...state,\n                ...payload\n            };\n        default:\n            return state\n    }\n}","/Users/gleb/projects/dds-frontend/src/redux/reducers/wallet.js",["150","151"],"import {getFromStorage, setToStorage} from '../../utils';\n\nconst defaultNetworkFrom = getFromStorage('defaultNetworkFrom');\nconst networkFrom = defaultNetworkFrom ? defaultNetworkFrom : 'Ethereum';\n\nconst initialState = {\n  type: '',\n  networkFrom,\n  networkTo: '',\n  dexList: '',\n  dex: '',\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case 'WALLET:SET_TYPE': return { ...state, type: payload, };\n    case 'WALLET:SET_NETWORK_FROM': return { ...state, networkFrom: payload, };\n    case 'WALLET:SET_NETWORK_TO': return { ...state, networkTo: payload, };\n    case 'WALLET:SET_DEX_LIST': return { ...state, dexList: payload, };\n    case 'WALLET:SET_DEX': return { ...state, dex: payload, };\n    default: return state;\n  }\n}\n","/Users/gleb/projects/dds-frontend/src/components/Modal/index.js",["152"],"import React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './style.scss';\nimport { modalActions } from \"../../redux/actions\";\nimport { ReactComponent as IconClose } from \"../../assets/icons/close.svg\";\n\nfunction Modal() {\n  const { isOpen, text } = useSelector(({ modal }) => ({\n    isOpen: modal.isOpen,\n    text: modal.text,\n  }))\n\n  const dispatch = useDispatch();\n\n  const ref = React.useRef();\n\n  const handleClose = () => dispatch(modalActions.toggleModal({ isOpen:false, text:null }))\n\n  const handleClickOutside = (e) => {\n    if (e.target===ref.current)\n    dispatch(modalActions.toggleModal({isOpen:false,text:''}))\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('click',handleClickOutside)\n    return () => document.removeEventListener('click',handleClickOutside)\n  },[])\n\n  return (\n  <div className={ isOpen ? \"modal-open\" : \"modal-closed\" } ref={ ref }>\n    <div className=\"modal-container\">\n      <div\n      className=\"modal-header\"\n      >\n        <IconClose\n        onClick={handleClose}\n        className=\"modal-close\"\n        />\n      </div>\n      { text }\n    </div>\n  </div>\n  );\n}\n\nexport default Modal;\n","/Users/gleb/projects/dds-frontend/src/components/Form/index.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './style.scss';\nimport Dropdown from '../Dropdown';\nimport Input from '../Input';\nimport { ReactComponent as IconArrowWhite } from '../../assets/icons/arrow-right-white.svg';\nimport { ReactComponent as IconError } from '../../assets/icons/error.svg';\nimport { ReactComponent as IconInfo } from '../../assets/icons/info.svg';\nimport { ReactComponent as IconLink } from '../../assets/icons/link.svg';\nimport {\n  userActions,\n  modalActions,\n  walletActions,\n  formActions,\n} from '../../redux/actions';\nimport { useContractContext } from '../../contexts/contractContext';\nimport {\n  BackendService,\n  setToStorage,\n  getTokenSymbol,\n  getTokenLink,\n} from '../../utils';\n\nconst backendService = new BackendService();\n\nconst networksMetamask = [\n  {\n    id: 2,\n    key: 'Ethereum',\n    text: 'Ethereum',\n    image: require('../../assets/icons/crypto/eth-circle.svg').default,\n  },\n  {\n    id: 1,\n    key: 'Binance-Smart-Chain',\n    text: 'Binance-Smart-Chain',\n    image: require('../../assets/icons/crypto/bnb-circle.svg').default,\n  },\n];\n\nconst networksMetamaskFrom = [\n  {\n    id: 2,\n    key: 'Ethereum',\n    text: 'Ethereum',\n    image: require('../../assets/icons/crypto/eth-circle.svg').default,\n  },\n  {\n    id: 1,\n    key: 'Binance-Smart-Chain',\n    text: 'Binance-Smart-Chain',\n    image: require('../../assets/icons/crypto/bnb-circle.svg').default,\n  },\n];\n\nconst networksMetamaskTo = [\n  {\n    id: 2,\n    key: 'Ethereum',\n    text: 'Ethereum',\n    image: require('../../assets/icons/crypto/eth-circle.svg').default,\n  },\n  {\n    id: 1,\n    key: 'Binance-Smart-Chain',\n    text: 'Binance-Smart-Chain',\n    image: require('../../assets/icons/crypto/bnb-circle.svg').default,\n  },\n];\n\nfunction Form() {\n  const { walletService, contractService } = useContractContext();\n\n  const dispatch = useDispatch();\n  const { address: userAddress } = useSelector(({ user }) => user);\n  const form = useSelector(({ form }) => form);\n  const wallet = useSelector(({ wallet }) => wallet);\n  const { dex } = useSelector(({ wallet }) => wallet);\n\n  const [networks, setNetworks] = React.useState(networksMetamask);\n  const [networksFrom, setNetworksFrom] = React.useState(networksMetamaskFrom);\n  const [networksTo, setNetworksTo] = React.useState(networksMetamaskTo);\n  const [networkFrom, setNetworkFrom] = React.useState(wallet.networkFrom);\n  const [networkTo, setNetworkTo] = React.useState('Binance-Smart-Chain');\n  const [amount, setAmount] = React.useState('0');\n  const [receive, setReceive] = React.useState('0');\n  const [receiver, setReceiver] = React.useState('');\n  const [fee, setFee] = React.useState(0);\n  const [tokenAddressFrom, setTokenAddressFrom] = React.useState();\n  const [tokenAddressTo, setTokenAddressTo] = React.useState();\n  const [approved, setApproved] = React.useState(false);\n  const [approving, setApproving] = React.useState(false);\n  const [waiting, setWaiting] = React.useState(false);\n  const [minimumAmount, setMinimumAmount] = React.useState(0);\n\n  const isNetworkFromBinanceChain = networkFrom === 'Binance-Chain';\n  const isNetworkFromBinanceSmartChain = networkFrom === 'Binance-Smart-Chain';\n  const isNetworkFromEthereum = networkFrom === 'Ethereum';\n  const isNetworkToBinanceChain = networkTo === 'Binance-Chain';\n  const isNetworkToBinanceSmartChain = networkTo === 'Binance-Smart-Chain';\n  const isNetworkToEthereum = networkTo === 'Ethereum';\n\n  const toggleModal = ({ isOpen, text }) =>\n    dispatch(modalActions.toggleModal({ isOpen, text }));\n  const showFormError = (data) => dispatch(formActions.showFormError(data));\n\n  const getMinimumAmount = () => {\n    try {\n      const minimumAmount = dex.min_swap_amount;\n      setMinimumAmount(minimumAmount);\n      return minimumAmount;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const getFee = () => {\n    try {\n      const network = networks.filter((item) => item.key === networkTo)[0];\n      const networkName = network && network.text;\n      const token =\n        dex && dex.tokens.filter((item) => item.network === networkName)[0];\n      const fee = dex ? token && token.fee : 0;\n      setFee(fee);\n      return fee;\n    } catch (e) {\n      console.error(e);\n      toggleModal({ isOpen: true, text: 'Server is offline' });\n    }\n  };\n\n  const getAddresses = () => {\n    try {\n      if (!dex) return;\n      const dexFrom = dex.tokens.filter(\n        (item) => item.network === networkFrom,\n      )[0];\n      const dexTo = dex.tokens.filter((item) => item.network === networkTo)[0];\n      // console.log('getAddresses',dexFrom,dexTo)\n      setTokenAddressFrom(dexFrom.token_address);\n      setTokenAddressTo(dexTo.token_address);\n    } catch (e) {\n      console.error(e);\n      toggleModal({ isOpen: true, text: 'Server is offline' });\n    }\n  };\n\n  const handleChangeAmount = (value) => {\n    try {\n      showFormError({ amount: null });\n      let newValue = value;\n      if (newValue < 0) newValue = '0';\n      if (\n        newValue.length > 1 &&\n        Number(newValue) >= 1 &&\n        newValue.slice(0, 1)[0] === '0'\n      )\n        newValue = newValue.slice(1);\n      newValue = String(newValue).replace(',', '.');\n      // get swap address\n      if (!dex) newValue = '0';\n      const network = networks.filter((item) => item.key === networkFrom)[0];\n      const networkName = network && network.text;\n      const token =\n        dex && dex.tokens.filter((item) => item.network === networkName)[0];\n      // console.log(networks,networkFrom,networkName,wallet,dex)\n      if (!token) return setReceive('0');\n      const fee = getFee();\n      let newReceive = +newValue - fee;\n      if (newReceive < 0) newReceive = '0';\n      if (isNaN(newReceive)) newReceive = '0';\n      setReceive(newReceive);\n      setAmount(newValue);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleSendMax = async () => {\n    try {\n      // console.log('handleSendMax')\n      const balance = await contractService.balanceOf(userAddress);\n      // console.log(balance)\n      handleChangeAmount(balance);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleFocusAmount = (e) => {\n    let newValue = e.target.value;\n    if (newValue === '0') setAmount('');\n  };\n\n  const handleChangeNetworkFrom = (e) => {\n    try {\n      dispatch(walletActions.setWalletType(null));\n      dispatch(userActions.setUserData({ address: null }));\n      setNetworkFrom(e);\n      setToStorage('defaultNetworkFrom', e);\n      dispatch(walletActions.setWalletNetFrom(e));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const getNetworksTo = () => {\n    const networksTo = networks.filter((item) => item.key !== networkFrom);\n    setNetworksTo(networksTo);\n    if (networkFrom === networkTo) handleChangeNetworkTo(null);\n    if (networkFrom === 'Ethereum')\n      handleChangeNetworkTo('Binance-Smart-Chain');\n    if (networkFrom === 'Binance-Smart-Chain')\n      handleChangeNetworkTo('Ethereum');\n  };\n\n  const handleChangeNetworkTo = (e) => {\n    try {\n      showFormError({ receiver: null });\n      setNetworkTo(e);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const checkGas = async (swap) => {\n    try {\n      const resultGetGas = await backendService.getGas({ network: networkTo });\n      const gas = resultGetGas.data;\n      console.log('resultGetGas', gas);\n      if (gas && gas.status !== 'OK') {\n        toggleModal({\n          isOpen: true,\n          text: (\n            <div>\n              <div className=\"modal-gas-text\">\n                <div>\n                  Gas price in the {networkTo.split('-').join(' ')} network is\n                  too high.\n                </div>\n                <div>The swap can take longer than usual.</div>\n              </div>\n              <div className=\"modal-gas-buttons\">\n                <div className=\"button mh10 mt20\" onClick={cancelSwap}>\n                  <IconArrowWhite className=\"button-arrow\" />\n                  Close\n                </div>\n                <div className=\"button mh10 mt20\" onClick={swap}>\n                  <IconArrowWhite className=\"button-arrow\" />\n                  Proceed\n                </div>\n              </div>\n            </div>\n          ),\n        });\n        return false;\n      } else {\n        return true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const checkFields = async ({ txType }) => {\n    try {\n      if (txType === 'approve') return true;\n      const balance = await contractService.balanceOf(userAddress);\n      const isAmountNaN = isNaN(+amount);\n      const isAmountLessThanMinimum = amount < minimumAmount;\n      const isBalanceLessThanAmount = +balance < amount;\n      if (isAmountNaN)\n        showFormError({ amount: { text: `Amount is not valid` } });\n      if (isBalanceLessThanAmount)\n        showFormError({ amount: { text: `Insufficient balance: ${balance}` } });\n      if (isAmountLessThanMinimum)\n        showFormError({ amount: { text: `Minimum amount: ${minimumAmount}` } });\n      if (isAmountLessThanMinimum || isAmountNaN || isBalanceLessThanAmount)\n        return false; // чтобы сразу все предупреждения выскочили\n      return true;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const checkAllowance = async (intervalCheckAllowance) => {\n    try {\n      const balance = await contractService.balanceOf(userAddress);\n      console.log('balanceOf', balance);\n      const allowance = await contractService.allowance(userAddress);\n      console.log('allowance', allowance);\n      if (!intervalCheckAllowance) setApproving(false);\n      if (allowance > 0 && amount <= allowance) {\n        setApproved(true);\n        clearInterval(intervalCheckAllowance);\n        return true;\n      }\n      return false;\n    } catch (e) {\n      clearInterval(intervalCheckAllowance);\n      console.error(e);\n    }\n  };\n\n  const approve = async () => {\n    try {\n      const areAllFieldsOk = await checkFields({ txType: 'approve' });\n      if (!areAllFieldsOk) return;\n      setApproving(true);\n      await contractService.approveToken(userAddress, async (res) => {\n        console.log('approveToken', res);\n        if (res.status === 'ERROR') return setApproving(false);\n        const intervalCheckAllowance = setInterval(async () => {\n          await checkAllowance(intervalCheckAllowance);\n        }, 500);\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const cancelSwap = async () => {\n    return toggleModal({ isOpen: false, text: null });\n  };\n\n  const swap = async () => {\n    try {\n      toggleModal({ isOpen: false, text: null });\n      const areAllFieldsOk = await checkFields({ txType: 'swap' });\n      if (!areAllFieldsOk) return;\n      if (isNetworkFromBinanceChain) {\n        const blockchain =\n          networks && networks.filter((item) => item.key === networkTo)[0].id;\n        const balance = await contractService.transferFromBinanceChain({\n          userAddress,\n          blockchain,\n          amount,\n          receiver: userAddress,\n        });\n        console.log(balance);\n        return;\n      }\n      setWaiting(true);\n      const blockchain =\n        networks && networks.filter((item) => item.key === networkTo)[0].id;\n      await contractService.transferToOtherBlockchain({\n        userAddress,\n        blockchain,\n        amount,\n        receiver: userAddress,\n        callback: async (res) => {\n          console.log('transferToOtherBlockchain', res);\n          if (res.status === 'SUCCESS') {\n            setAmount('0');\n            setReceive('0');\n          }\n          setWaiting(false);\n        },\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleSwap = async () => {\n    try {\n      if (isNetworkToBinanceChain) return swap();\n      const isGasOk = await checkGas(swap);\n      if (isGasOk) swap();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const chooseWalletToConnect = () => {\n    toggleModal({\n      isOpen: true,\n      text: (\n        <div>\n          <div className=\"m10\">Choose wallet to connect</div>\n\n          {networkFrom === 'Ethereum' && (\n            <>\n              <div\n                className=\"button m10\"\n                onClick={() => {\n                  dispatch(walletActions.setWalletType('metamask'));\n                  toggleModal({ isOpen: false });\n                }}>\n                <IconArrowWhite className=\"button-arrow\" />\n                Metamask\n              </div>\n            </>\n          )}\n\n          {['Binance-Chain', 'Binance-Smart-Chain'].includes(networkFrom) && (\n            <>\n              <div\n                className=\"button m10\"\n                onClick={() => {\n                  dispatch(walletActions.setWalletType('binance'));\n                  toggleModal({ isOpen: false });\n                }}>\n                <IconArrowWhite className=\"button-arrow\" />\n                Binance Chain Wallet\n              </div>\n            </>\n          )}\n        </div>\n      ),\n    });\n  };\n\n  React.useEffect(() => {\n    if (!networkFrom) return;\n    getNetworksTo();\n    getAddresses();\n  }, [networkFrom]);\n\n  React.useEffect(() => {\n    if (!networkTo) return;\n    amount && handleChangeAmount(amount);\n    if (!dex) return;\n    getFee();\n    getMinimumAmount();\n    getAddresses();\n  }, [networkTo, dex]);\n\n  React.useEffect(() => {\n    if (!userAddress) return;\n    if (!contractService) return;\n    setApproving(true);\n    !isNetworkFromBinanceChain && checkAllowance();\n  }, [amount, userAddress, contractService]);\n\n  return (\n    <form className=\"form\" type=\"submit\">\n      <div className=\"form-label-uppercase\">\n        <div className=\"\">From</div>\n      </div>\n\n      <Dropdown\n        label=\"Choose network\"\n        items={networksFrom}\n        value={networkFrom}\n        onChange={handleChangeNetworkFrom}\n      />\n\n      <div className=\"form-label-uppercase\">\n        <div className=\"\">To</div>\n      </div>\n\n      <Dropdown\n        label=\"Choose destination network\"\n        items={networksTo}\n        value={networkTo}\n        onChange={handleChangeNetworkTo}\n      />\n\n      <div className=\"form-label-uppercase\">\n        <div>Amount</div>\n        <a\n          className=\"form-label-link-right\"\n          href={getTokenLink(networkFrom, tokenAddressFrom)}\n          target=\"_blank\">\n          <div className=\"link\">{getTokenSymbol(networkFrom)}</div>\n          <IconLink className=\"input-label-inner-image\" />\n        </a>\n      </div>\n\n      <Input\n        name=\"amount\"\n        medium\n        formatNumber\n        error={form.amount}\n        type=\"text\"\n        placeholder=\"0.00\"\n        value={amount}\n        onChange={handleChangeAmount}\n        onFocus={handleFocusAmount}\n        label={\n          userAddress &&\n          !isNetworkFromBinanceChain && (\n            <>\n              <div></div>\n              <div className=\"pointer\" onClick={handleSendMax}>\n                Send max\n              </div>\n            </>\n          )\n        }\n      />\n\n      <div className=\"form-label-under\">\n        <div className=\"form-label-left\">Fee: {fee}</div>\n        <div\n          className={\n            form.amount && form.amount.text.includes('Minimum')\n              ? 'form-label-right-error'\n              : 'form-label-right'\n          }>\n          {form.amount && form.amount.text.includes('Minimum') && (\n            <IconError className=\"form-label-error-icon\" />\n          )}\n          Minimum amount: {minimumAmount} KYP\n        </div>\n      </div>\n\n      {form.amount &&\n        (form.amount.text.includes('Amount') ||\n          form.amount.text.includes('balance')) && (\n          <div className=\"form-label-error\">\n            <IconError className=\"form-label-error-icon\" />\n            {form.amount.text}\n          </div>\n        )}\n\n      <div className=\"form-label-uppercase\">\n        <div>You will receive</div>\n        <a\n          className=\"form-label-link-right\"\n          href={getTokenLink(networkTo, tokenAddressTo)}\n          target=\"_blank\">\n          <div className=\"link\">{getTokenSymbol(networkTo)}</div>\n          <IconLink className=\"input-label-inner-image\" />\n        </a>\n      </div>\n\n      <Input\n        name=\"receive\"\n        medium\n        disabled\n        formatNumber\n        type=\"text\"\n        placeholder=\"0.00\"\n        value={receive}\n      />\n\n      <div className=\"form-label-note\">\n        <IconInfo className=\"form-label-error-icon\" />\n        Note: Transfer from Ethereum Network with Metamask wallet\n      </div>\n\n      <div\n        className={\n          isNetworkFromBinanceChain ? 'form-buttons' : 'form-buttons-one'\n        }>\n        {!userAddress ? (\n          <div className=\"button-big mt20\" onClick={chooseWalletToConnect}>\n            <IconArrowWhite className=\"button-arrow\" />\n            Connect wallet\n          </div>\n        ) : approved || isNetworkFromBinanceChain ? (\n          waiting ? (\n            <div className=\"button button-disabled mt20\">\n              <IconArrowWhite className=\"button-arrow\" />\n              Waiting...\n            </div>\n          ) : (\n            <div className=\"button mt20\" onClick={handleSwap}>\n              <IconArrowWhite className=\"button-arrow\" />\n              Swap\n            </div>\n          )\n        ) : (\n          <div\n            className={`button ${approving ? 'button-disabled' : ''} mt20`}\n            onClick={!approving ? approve : () => {}}>\n            <IconArrowWhite className=\"button-arrow\" />\n            {approving || waiting ? 'Waiting...' : 'Approve'}\n          </div>\n        )}\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n","/Users/gleb/projects/dds-frontend/src/components/Header/index.js",[],"/Users/gleb/projects/dds-frontend/src/components/Footer/index.js",[],"/Users/gleb/projects/dds-frontend/src/contexts/contractContext/index.js",["167","168","169","170","171"],"import React, { createContext, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  BinanceService,\n  ContractService,\n  MetamaskService,\n  BackendService,\n} from '../../utils';\nimport { userActions, modalActions, walletActions } from '../../redux/actions';\n\nconst contractContext = createContext({\n  walletService: null,\n  contractService: null,\n});\n\nconst backendService = new BackendService();\n\nconst ContractProvider = ({ children }) => {\n  const [walletService, setWalletService] = React.useState(null);\n  const [contractService, setContractService] = React.useState(null);\n  const [contractDetails, setContractDetails] = React.useState(null);\n\n  const dispatch = useDispatch();\n  const setUserData = (data) => dispatch(userActions.setUserData(data));\n  const toggleModal = (data) => dispatch(modalActions.toggleModal(data));\n  const setWalletDex = (data) => dispatch(walletActions.setWalletDex(data));\n  const { walletType, networkFrom, networkTo } = useSelector(({ wallet }) => ({\n    walletType: wallet.type,\n    networkFrom: wallet.networkFrom,\n    networkTo: wallet.networkTo,\n  }));\n\n  const loginMetamask = async () => {\n    try {\n      console.log('loginMetamask', networkFrom, contractDetails);\n      const wallet = new MetamaskService({\n        networkFrom,\n        contractDetails,\n      });\n      await window.ethereum.enable();\n      setContractService(\n        new ContractService({\n          wallet,\n          networkFrom,\n          contractDetails,\n        }),\n      );\n      setWalletService(wallet);\n      const account = await wallet.getAccount();\n      setUserData(account);\n    } catch (e) {\n      console.error(e);\n      if (!e.errorMsg || e.errorMsg === '') {\n        toggleModal({\n          isOpen: true,\n          text: (\n            <div>\n              <p>Metamask extension is not found.</p>\n              <p>\n                You can install it from{' '}\n                <a href=\"https://metamask.io\" target=\"_blank\">\n                  metamask.io\n                </a>\n              </p>\n            </div>\n          ),\n        });\n      } else {\n        toggleModal({ isOpen: true, text: e.errorMsg });\n      }\n    }\n  };\n\n  const loginBinance = async (interval) => {\n    debugger;\n    try {\n      console.log('loginBinance', networkFrom);\n      const wallet = new BinanceService({\n        networkFrom,\n        contractDetails,\n      });\n      setContractService(\n        new ContractService({\n          wallet,\n          networkFrom,\n          contractDetails,\n        }),\n      );\n      setWalletService(wallet);\n      const account = await wallet.getAccount();\n      setUserData(account);\n    } catch (e) {\n      console.error(e);\n      if (!e.errorMsg || e.errorMsg === '') {\n        toggleModal({\n          isOpen: true,\n          text: (\n            <div>\n              <p>Binance Chain Wallet is not found.</p>\n              <p>\n                You can install it from{' '}\n                <a href=\"https://www.binance.org\" target=\"_blank\">\n                  binance.org\n                </a>\n              </p>\n            </div>\n          ),\n        });\n      } else {\n        toggleModal({ isOpen: true, text: e.errorMsg });\n      }\n    }\n  };\n\n  const getDex = async () => {\n    try {\n      const resultGetDex = await backendService.getDex({ name: 'bscgirl' });\n      const dex = resultGetDex.data;\n      setWalletDex(dex);\n      console.log('resultGetDex', resultGetDex.data);\n      const tokens = dex.tokens;\n      if (!dex)\n        return dispatch(\n          modalActions.toggleModal({\n            isOpen: true,\n            text: 'Server is offline',\n          }),\n        );\n      if (tokens && !tokens[0])\n        return dispatch(\n          modalActions.toggleModal({\n            isOpen: true,\n            text: 'Server is offline',\n          }),\n        );\n      const binanceSmartChain = tokens.filter(\n        (item) => item.network === 'Binance-Smart-Chain',\n      )[0];\n      const ethereumChain = tokens.filter(\n        (item) => item.network === 'Ethereum',\n      )[0];\n      let contractDetails = {\n        ADDRESS: {\n          TOKEN: {\n            Ethereum: ethereumChain.token_address,\n            'Binance-Smart-Chain': binanceSmartChain.token_address,\n          },\n          SWAP: {\n            Ethereum: ethereumChain.swap_address,\n            'Binance-Smart-Chain': binanceSmartChain.swap_address,\n          },\n          FEE: {\n            Ethereum: ethereumChain.fee_address,\n            'Binance-Smart-Chain': binanceSmartChain.fee_address,\n          },\n        },\n        DECIMALS: {\n          TOKEN: {\n            Ethereum: ethereumChain.decimals,\n            'Binance-Smart-Chain': binanceSmartChain.decimals,\n          },\n          SWAP: {\n            Ethereum: ethereumChain.decimals,\n            'Binance-Smart-Chain': binanceSmartChain.decimals,\n          },\n        },\n        ABI: {\n          TOKEN: {\n            Ethereum: ethereumChain.token_abi,\n            'Binance-Smart-Chain': binanceSmartChain.token_abi,\n          },\n          SWAP: {\n            Ethereum: ethereumChain.swap_abi,\n            'Binance-Smart-Chain': binanceSmartChain.swap_abi,\n          },\n        },\n      };\n      setContractDetails(contractDetails);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  React.useEffect(() => {\n    console.log('ContractContext useEffect walletType', walletType);\n    (async () => {\n      await getDex();\n    })();\n  }, [walletType]);\n\n  React.useEffect(() => {\n    console.log('ContractContext useEffect contractDetails', contractDetails);\n    if (!contractDetails) return;\n    (async () => {\n      const walletTypeOnReload = localStorage.getItem('walletTypeOnReload');\n      if (walletType === 'metamask' || walletTypeOnReload === 'metamask') {\n        loginMetamask();\n      } else if (walletType === 'binance' || walletTypeOnReload === 'binance') {\n        loginBinance();\n      }\n      localStorage.setItem('walletTypeOnReload', '');\n    })();\n  }, [contractDetails]);\n\n  return (\n    <contractContext.Provider value={{ walletService, contractService }}>\n      {children}\n    </contractContext.Provider>\n  );\n};\n\nexport default ContractProvider;\n\nexport function useContractContext() {\n  return useContext(contractContext);\n}\n","/Users/gleb/projects/dds-frontend/src/utils/index.js",[],"/Users/gleb/projects/dds-frontend/src/redux/actions/index.js",[],"/Users/gleb/projects/dds-frontend/src/components/Input/index.js",["172","173","174","175","176","177","178","179"],"import React from 'react';\n\nimport './style.scss';\nimport {\n  formatNumberWithSpace,\n  formatNumberWithSpaceBack,\n  formatNumberWithDots,\n  setToStorage,\n  getFromStorage,\n} from '../../utils';\n\nconst Input = React.memo((props) => {\n  let {\n    name = '',\n    type = 'text',\n    disabled = false,\n    error = false,\n    label,\n    labelInner,\n    placeholder = '',\n    styleCustom = {},\n    big = false,\n    medium = false,\n    focused = false,\n    value = '',\n    formatNumber = false,\n    dynamicFontSize = false,\n    onChange = (v) => {},\n    onFocus = (v) => {},\n  } = props;\n\n  const [newPlaceholder, setNewPlaceholder] = React.useState(placeholder);\n\n  // setToStorage(`input-${name}`,value);\n  // if (formatNumber) value = formatNumberWithDots(value);\n\n  const handleChange = (e) => {\n    let value = e.target.value;\n    // console.log('Input',value)\n    // if (formatNumber) value = getFromStorage(`input-${name}`);\n    // console.log('Input',value)\n    onChange(value);\n  };\n\n  const handleFocus = (e) => {\n    setNewPlaceholder('');\n    onFocus(e);\n  };\n\n  const handleBlur = (e) => setNewPlaceholder(placeholder);\n\n  const isError = error ? 'error' : '';\n  const classNameInput = big\n    ? `input-big ${isError}`\n    : medium\n    ? `input-medium ${isError}`\n    : `input ${isError}`;\n\n  return (\n    <div className={`input-container ${error ? 'error' : ''}`}>\n      {label && (\n        <label\n          htmlFor=\"input\"\n          className={big ? 'input-label-big' : 'input-label'}>\n          {label}\n        </label>\n      )}\n      <div className={`input-container-inner`}>\n        <div className={`input-container-input`}>\n          <input\n            id=\"input\"\n            disabled={disabled}\n            ref={(r) => r && focused && r.focus()}\n            className={classNameInput}\n            style={{ ...styleCustom }}\n            type={type}\n            placeholder={newPlaceholder}\n            value={value}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n          />\n        </div>\n        {labelInner && <div className=\"input-label-inner\">{labelInner}</div>}\n      </div>\n    </div>\n  );\n});\n\nexport default Input;\n","/Users/gleb/projects/dds-frontend/src/components/HeaderDropdown/index.js",["180","181","182"],"/Users/gleb/projects/dds-frontend/src/components/Dropdown/index.js",["183","184","185"],"import React from 'react';\n\nimport './style.scss';\nimport { ReactComponent as IconArrow } from '../../assets/icons/arrow-down.svg';\nimport { ReactComponent as IconSearch } from '../../assets/icons/search.svg';\n\nconst Dropdown = React.memo((props) => {\n  let {\n    label = 'Choose',\n    items = [],\n    onChange = () => {},\n    value = null,\n    search = false,\n  } = props;\n\n  const refLabel = React.useRef();\n  const refList = React.useRef();\n  const refSearchInput = React.useRef();\n\n  const [open, setOpen] = React.useState(false);\n  const [searchQuery, setSearchQuery] = React.useState('');\n\n  const choosenItem =\n    items && value ? items.filter((item) => item.key === value)[0] : null;\n\n  items = items && items.filter((item) => item.key !== value);\n  if (search) {\n    items =\n      items &&\n      items.filter((item) => {\n        return item.key.toLowerCase().includes(searchQuery.toLowerCase());\n      });\n  }\n\n  const handleClickLabel = () => {\n    setOpen(!open);\n  };\n\n  const handleChoose = (key) => {\n    onChange(key);\n  };\n\n  const handleSearch = (e) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n  };\n\n  const handleClickOutside = (e) => {\n    if (\n      e.target !== refList.current &&\n      e.target !== refLabel.current &&\n      e.target !== refSearchInput.current\n    ) {\n      setOpen(false);\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n  }, []);\n\n  React.useEffect(() => {\n    search &&\n      open &&\n      refSearchInput.current &&\n      setTimeout(() => {\n        refSearchInput.current.focus();\n      }, 100); // изменить, если в scss анимации стоит большее время\n  }, [open]);\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n  }, [items, value]);\n\n  return (\n    <div className=\"dropdown\">\n      <div ref={refLabel} className=\"dropdown-label\" onClick={handleClickLabel}>\n        <div className=\"dropdown-label-left\">\n          {choosenItem && (\n            <img className=\"dropdown-item-image\" src={choosenItem.image} />\n          )}\n          {choosenItem ? choosenItem.text : label}\n        </div>\n\n        {items && items.length > 0 && (\n          <IconArrow\n            className={open ? 'dropdown-arrow-right' : 'dropdown-arrow-down'}\n          />\n        )}\n      </div>\n\n      <div className={open ? 'dropdown-list-open' : 'dropdown-list'}>\n        {search && (\n          <div\n            className={open ? 'dropdown-search' : 'dropdown-search-hide'}\n            ref={refList}>\n            <IconSearch className=\"dropdown-search-icon\" />\n            <input\n              ref={refSearchInput}\n              className=\"dropdown-search-input\"\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={handleSearch}\n            />\n          </div>\n        )}\n\n        {items.map((item, ii) => {\n          const { key = '', text = '', image } = item;\n          return (\n            <div\n              key={`${key}-${ii}`}\n              className=\"dropdown-item\"\n              onClick={() => handleChoose(item.key)}>\n              <img className=\"dropdown-item-image\" src={image} />\n              {text}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default Dropdown;\n","/Users/gleb/projects/dds-frontend/src/utils/prettifiers.js",["186"],"import config from '../config';\n\nexport const formatNumberWithDots = (value) => {\n  if (!value) return '';\n  let parts = value.toString().split('.');\n  const number = 4;\n  const numberSum = 8;\n  if (parts[0] && parts[0].length > number)\n    parts[0] = `${parts[0].slice(0, number)}...${parts[0].slice(\n      number,\n      numberSum,\n    )}`;\n  if (parts[1] && parts[1].length > number)\n    parts[1] = `${parts[1].slice(1, number)}...${parts[1].slice(\n      number,\n      numberSum,\n    )}`;\n  return parts.join('.');\n};\n\nexport const formatNumberWithSpace = (value) => {\n  if (!value) return '';\n  let parts = value.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  const n = value > 1 ? 2 : 4;\n  if (parts[1]) parts[1] = parts[1].slice(0, n);\n  return parts.join('.');\n};\n\nexport const formatNumberWithSpaceBack = (value) => {\n  if (!value) return '';\n  return value.replace(' ', '');\n};\n\nexport const getTokenLink = (network, tokenAddress) => {\n  const isNetworkBinanceChain = network === 'Binance-Chain';\n  const isNetworkBinanceSmartChain = network === 'Binance-Smart-Chain';\n  const isNetworkEthereum = network === 'Ethereum';\n  return isNetworkBinanceChain\n    ? 'https://explorer.binance.org/asset/WISH-2D5'\n    : config.tokenLinks()[\n        isNetworkEthereum\n          ? 'ethereum'\n          : isNetworkBinanceChain\n          ? 'binanceChain'\n          : 'binanceSmartChain'\n      ] + `/token/${tokenAddress}`;\n};\n\nexport const getTokenSymbol = (network) => {\n  return network === 'Binance-Chain'\n    ? 'DDS'\n    : network === 'Binance-Smart-Chain'\n    ? 'bscscan kyp'\n    : 'etherscan KYP';\n};\n","/Users/gleb/projects/dds-frontend/src/utils/localStorage.js",[],"/Users/gleb/projects/dds-frontend/src/redux/actions/user.js",["187"],"export default {\n    setUserData: data => ({\n        type: 'USER:SET_DATA',\n        payload: data\n    })\n}","/Users/gleb/projects/dds-frontend/src/redux/actions/wallet.js",["188"],"export default {\n  setWalletType: data => ({ type: 'WALLET:SET_TYPE', payload: data }),\n  setWalletNetFrom: data => ({ type: 'WALLET:SET_NETWORK_FROM', payload: data }),\n  setWalletNetTo: data => ({ type: 'WALLET:SET_NETWORK_TO', payload: data }),\n  setWalletDexList: data => ({ type: 'WALLET:SET_DEX_LIST', payload: data }),\n  setWalletDex: data => ({ type: 'WALLET:SET_DEX', payload: data }),\n}\n","/Users/gleb/projects/dds-frontend/src/redux/actions/modal.js",["189"],"export default {\n    toggleModal: data => ({\n        type: 'MODAL:TOGGLE',\n        payload: data\n    })\n}","/Users/gleb/projects/dds-frontend/src/redux/actions/form.js",["190"],"export default {\n    showFormError: data => ({\n        type: 'FORM:ERROR',\n        payload: data\n    })\n}\n","/Users/gleb/projects/dds-frontend/src/utils/binance/index.js",[],"/Users/gleb/projects/dds-frontend/src/utils/metamask/index.js",[],"/Users/gleb/projects/dds-frontend/src/utils/backend/index.js",[],"/Users/gleb/projects/dds-frontend/src/utils/contractService/index.js",["191"],"import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport config from '../../config';\n\n\nexport default class ContractService {\n\n  constructor({wallet,networkFrom,contractDetails}) {\n    console.log('ContractService:',networkFrom, contractDetails);\n    this.wallet = wallet;\n    this.net = config.IS_PRODUCTION ? 'mainnet' : 'testnet';\n    this.contractAddressToken = contractDetails.ADDRESS.TOKEN[networkFrom];\n    this.contractAddressSwap = contractDetails.ADDRESS.SWAP[networkFrom];\n    this.contractAbiToken = contractDetails.ABI.TOKEN[networkFrom];\n    this.contractAbiSwap = contractDetails.ABI.SWAP[networkFrom];\n    this.decimals = contractDetails.DECIMALS.TOKEN[networkFrom];\n    if (networkFrom==='Binance-Chain') return;\n    this.contractToken = this.wallet.getContract(this.contractAbiToken, this.contractAddressToken)\n    this.contractSwap = this.wallet.getContract(this.contractAbiSwap, this.contractAddressSwap)\n  }\n\n  balanceOf = async (address) => {\n    // console.log('balanceOf',this.contractAddressToken,address,this.contractToken)\n    const balance = await this.contractToken.methods.balanceOf(address).call()\n    return +new BigNumber(balance).dividedBy(new BigNumber(10).pow(this.decimals)).toFixed()\n  }\n\n  allowance = async (address) => {\n    // console.log('allowance',address,this.contractAddressSwap)\n    const allowance = await this.contractToken.methods.allowance(address,this.contractAddressSwap).call()\n    return +new BigNumber(allowance).dividedBy(new BigNumber(10).pow(this.decimals)).toString(10)\n  }\n\n  totalSupply = async () => {\n    const totalSupply = await this.contractToken.methods.totalSupply().call()\n    return +new BigNumber(totalSupply).dividedBy(new BigNumber(10).pow(this.decimals)).toString(10)\n  }\n\n  approveToken = async (address, callback) => {\n    const totalSupply = await this.totalSupply();\n    this.wallet.approveToken(address, this.contractAddressSwap, totalSupply, callback,)\n  }\n\n  transferFromBinanceChain = async ({ userAddress, blockchain, amount, receiver, }) => {\n    try {\n      const data = `${blockchain}${receiver}`;\n      return await this.wallet.sendPlainTx({ addressFrom: userAddress, amount, data });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  transferToOtherBlockchain = async ({ userAddress, blockchain, amount, receiver, callback }) => {\n    this.wallet.transferToOtherBlockchain({ userAddress, blockchain, amount, receiver, callback })\n  }\n\n}\n",{"ruleId":"192","severity":1,"message":"193","line":7,"column":8,"nodeType":"194","messageId":"195","endLine":7,"endColumn":10},{"ruleId":"192","severity":1,"message":"196","line":14,"column":9,"nodeType":"194","messageId":"195","endLine":14,"endColumn":24},{"ruleId":"197","severity":1,"message":"198","line":1,"column":1,"nodeType":"199","endLine":53,"endColumn":3},{"ruleId":"197","severity":1,"message":"200","line":8,"column":1,"nodeType":"199","endLine":19,"endColumn":2},{"ruleId":"197","severity":1,"message":"200","line":8,"column":1,"nodeType":"199","endLine":19,"endColumn":2},{"ruleId":"197","severity":1,"message":"200","line":7,"column":1,"nodeType":"199","endLine":17,"endColumn":2},{"ruleId":"192","severity":1,"message":"201","line":1,"column":25,"nodeType":"194","messageId":"195","endLine":1,"endColumn":37},{"ruleId":"197","severity":1,"message":"200","line":14,"column":1,"nodeType":"199","endLine":23,"endColumn":2},{"ruleId":"202","severity":1,"message":"203","line":28,"column":5,"nodeType":"204","endLine":28,"endColumn":7,"suggestions":"205"},{"ruleId":"192","severity":1,"message":"206","line":73,"column":11,"nodeType":"194","messageId":"195","endLine":73,"endColumn":24},{"ruleId":"192","severity":1,"message":"207","line":81,"column":20,"nodeType":"194","messageId":"195","endLine":81,"endColumn":31},{"ruleId":"192","severity":1,"message":"208","line":82,"column":24,"nodeType":"194","messageId":"195","endLine":82,"endColumn":39},{"ruleId":"192","severity":1,"message":"209","line":88,"column":10,"nodeType":"194","messageId":"195","endLine":88,"endColumn":18},{"ruleId":"192","severity":1,"message":"210","line":88,"column":20,"nodeType":"194","messageId":"195","endLine":88,"endColumn":31},{"ruleId":"192","severity":1,"message":"211","line":98,"column":9,"nodeType":"194","messageId":"195","endLine":98,"endColumn":39},{"ruleId":"192","severity":1,"message":"212","line":99,"column":9,"nodeType":"194","messageId":"195","endLine":99,"endColumn":30},{"ruleId":"192","severity":1,"message":"213","line":101,"column":9,"nodeType":"194","messageId":"195","endLine":101,"endColumn":37},{"ruleId":"192","severity":1,"message":"214","line":102,"column":9,"nodeType":"194","messageId":"195","endLine":102,"endColumn":28},{"ruleId":"202","severity":1,"message":"215","line":419,"column":6,"nodeType":"204","endLine":419,"endColumn":19,"suggestions":"216"},{"ruleId":"202","severity":1,"message":"217","line":428,"column":6,"nodeType":"204","endLine":428,"endColumn":22,"suggestions":"218"},{"ruleId":"202","severity":1,"message":"219","line":435,"column":6,"nodeType":"204","endLine":435,"endColumn":44,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":463,"column":9,"nodeType":"223","messageId":"224","endLine":466,"endColumn":27,"fix":"225"},{"ruleId":"221","severity":1,"message":"222","line":521,"column":9,"nodeType":"223","messageId":"224","endLine":524,"endColumn":27,"fix":"226"},{"ruleId":"192","severity":1,"message":"227","line":28,"column":36,"nodeType":"194","messageId":"195","endLine":28,"endColumn":45},{"ruleId":"221","severity":1,"message":"222","line":62,"column":17,"nodeType":"223","messageId":"224","endLine":62,"endColumn":63,"fix":"228"},{"ruleId":"221","severity":1,"message":"222","line":103,"column":17,"nodeType":"223","messageId":"224","endLine":103,"endColumn":67,"fix":"229"},{"ruleId":"202","severity":1,"message":"230","line":190,"column":6,"nodeType":"204","endLine":190,"endColumn":18,"suggestions":"231"},{"ruleId":"202","severity":1,"message":"232","line":204,"column":6,"nodeType":"204","endLine":204,"endColumn":23,"suggestions":"233"},{"ruleId":"192","severity":1,"message":"234","line":5,"column":3,"nodeType":"194","messageId":"195","endLine":5,"endColumn":24},{"ruleId":"192","severity":1,"message":"235","line":6,"column":3,"nodeType":"194","messageId":"195","endLine":6,"endColumn":28},{"ruleId":"192","severity":1,"message":"236","line":7,"column":3,"nodeType":"194","messageId":"195","endLine":7,"endColumn":23},{"ruleId":"192","severity":1,"message":"201","line":8,"column":3,"nodeType":"194","messageId":"195","endLine":8,"endColumn":15},{"ruleId":"192","severity":1,"message":"237","line":9,"column":3,"nodeType":"194","messageId":"195","endLine":9,"endColumn":17},{"ruleId":"192","severity":1,"message":"238","line":14,"column":5,"nodeType":"194","messageId":"195","endLine":14,"endColumn":9},{"ruleId":"192","severity":1,"message":"239","line":26,"column":5,"nodeType":"194","messageId":"195","endLine":26,"endColumn":17},{"ruleId":"192","severity":1,"message":"240","line":27,"column":5,"nodeType":"194","messageId":"195","endLine":27,"endColumn":20},{"ruleId":"192","severity":1,"message":"241","line":23,"column":9,"nodeType":"194","messageId":"195","endLine":23,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":53,"column":11,"nodeType":"223","endLine":56,"endColumn":13},{"ruleId":"242","severity":1,"message":"243","line":75,"column":13,"nodeType":"223","endLine":78,"endColumn":15},{"ruleId":"202","severity":1,"message":"244","line":69,"column":6,"nodeType":"204","endLine":69,"endColumn":12,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"243","line":80,"column":13,"nodeType":"223","endLine":80,"endColumn":76},{"ruleId":"242","severity":1,"message":"243","line":115,"column":15,"nodeType":"223","endLine":115,"endColumn":66},{"ruleId":"192","severity":1,"message":"246","line":37,"column":9,"nodeType":"194","messageId":"195","endLine":37,"endColumn":35},{"ruleId":"197","severity":1,"message":"198","line":1,"column":1,"nodeType":"199","endLine":6,"endColumn":2},{"ruleId":"197","severity":1,"message":"198","line":1,"column":1,"nodeType":"199","endLine":7,"endColumn":2},{"ruleId":"197","severity":1,"message":"198","line":1,"column":1,"nodeType":"199","endLine":6,"endColumn":2},{"ruleId":"197","severity":1,"message":"198","line":1,"column":1,"nodeType":"199","endLine":6,"endColumn":2},{"ruleId":"192","severity":1,"message":"247","line":1,"column":8,"nodeType":"194","messageId":"195","endLine":1,"endColumn":13},"no-unused-vars","'bg' is defined but never used.","Identifier","unusedVar","'formatTokenLink' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","'setToStorage' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.","ArrayExpression",["248"],"'walletService' is assigned a value but never used.","'setNetworks' is assigned a value but never used.","'setNetworksFrom' is assigned a value but never used.","'receiver' is assigned a value but never used.","'setReceiver' is assigned a value but never used.","'isNetworkFromBinanceSmartChain' is assigned a value but never used.","'isNetworkFromEthereum' is assigned a value but never used.","'isNetworkToBinanceSmartChain' is assigned a value but never used.","'isNetworkToEthereum' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getAddresses' and 'getNetworksTo'. Either include them or remove the dependency array.",["249"],"React Hook React.useEffect has missing dependencies: 'amount', 'getAddresses', 'getFee', 'getMinimumAmount', and 'handleChangeAmount'. Either include them or remove the dependency array.",["250"],"React Hook React.useEffect has missing dependencies: 'checkAllowance' and 'isNetworkFromBinanceChain'. Either include them or remove the dependency array.",["251"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"252","text":"253"},{"range":"254","text":"253"},"'networkTo' is assigned a value but never used.",{"range":"255","text":"253"},{"range":"256","text":"253"},"React Hook React.useEffect has a missing dependency: 'getDex'. Either include it or remove the dependency array.",["257"],"React Hook React.useEffect has missing dependencies: 'loginBinance', 'loginMetamask', and 'walletType'. Either include them or remove the dependency array.",["258"],"'formatNumberWithSpace' is defined but never used.","'formatNumberWithSpaceBack' is defined but never used.","'formatNumberWithDots' is defined but never used.","'getFromStorage' is defined but never used.","'name' is assigned a value but never used.","'formatNumber' is assigned a value but never used.","'dynamicFontSize' is assigned a value but never used.","'handleChoose' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook React.useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["259"],"'isNetworkBinanceSmartChain' is assigned a value but never used.","'React' is defined but never used.",{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},[14284,14284]," rel=\"noreferrer\"",[15974,15974],[1990,1990],[3021,3021],{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [handleClickOutside]",{"range":"274","text":"275"},"Update the dependencies array to be: [getAddresses, getNetworksTo, networkFrom]",{"range":"276","text":"277"},"Update the dependencies array to be: [networkTo, dex, amount, handleChangeAmount, getFee, getMinimumAmount, getAddresses]",{"range":"278","text":"279"},"Update the dependencies array to be: [amount, userAddress, contractService, isNetworkFromBinanceChain, checkAllowance]",{"range":"280","text":"281"},"Update the dependencies array to be: [getDex, walletType]",{"range":"282","text":"283"},"Update the dependencies array to be: [contractDetails, loginBinance, loginMetamask, walletType]",{"range":"284","text":"285"},"Update the dependencies array to be: [open, search]",{"range":"286","text":"287"},[826,828],"[handleClickOutside]",[13078,13091],"[getAddresses, getNetworksTo, networkFrom]",[13276,13292],"[networkTo, dex, amount, handleChangeAmount, getFee, getMinimumAmount, getAddresses]",[13467,13505],"[amount, userAddress, contractService, isNetworkFromBinanceChain, checkAllowance]",[5449,5461],"[getDex, walletType]",[5983,6000],"[contractDetails, loginBinance, loginMetamask, walletType]",[1670,1676],"[open, search]"]